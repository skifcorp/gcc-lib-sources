[/==============================================================================
Copyright Jean-Louis Leroy 2009.
Use, modification, and distribution are subject to the Boost Software License, Version 1.0.
===============================================================================/]

[section Tutorial]

[heading The Basics]

[import tutorial.cpp]
[import output.txt]
[import sql.txt]
[import ../test/test_tables.hpp]

In this example we will use a __odbc__ database and __rdb__ to model a well-known fictional city and its fauna.

For starter we include the entire __sql__ and __odbc__ subsystems, and a couple of extra headers to help us see what's
going on. For the sake of simplicity we bring everything in scope via `using namespace` directives
[footnote On Windows you may get an error message about `select` being ambiguous. This is probably because you have
included `windows.h`, which declares the socket-related function of the same name. Either define `WIN32_LEAN_AND_MEAN`, or
add a `using sql::select` directive.]:

[prologue]

We must provide a description of the tables. We do this via a set of macros:

[schema]

Now for the main program. First we open the database:

[connect]

Of course this step is very database-dependant.

There is also a default constructor and an `open` function in case you need to create the database object and attach it to a database later.
[footnote The function is called `open` and not `connect` because there is no reason to believe that there is
a server to connect to. After all we could have linked SQLite or the MySQL engine in our program, right ? If
you still disagree, then let's just say that `open` stands for "open a connection"]

We can ask __rdb__ to create the tables now - although it doesn't insist on doing it. We can also create the tables with
another tool, provided that the C++ description agrees.

[create_tables]

Obviously the table description macros have created /types/. A __rdb__ table is represented by a class, which contains
one data member per column. Inside the class, there is a static instance called `_` (underscore) that represents the
table in the database.

However, this is a pretty long thing to type, so we can create an alias for the table:

[alias]

Don't get confused: this is a /C++/ alias, it has nothing to do with __sql__ table aliases (be patient, they're coming).
It's merely a shortcut that we can use in place of `person::_`.

Now let's begin populating our database:

[insert_homer]

The `insert_into(...)(...).values(...)` construct creates a Statement object, which is passed to the `execute`
function of the database object, which in turns asks it to return a string that reads, unsurprisingly :

[insert_sql]

At this point it looks the database object could function just as well if it simply took a string argument.
But hang on. Consider:

[insert_marge_error]

The statement is wrong ! Good thing that the compiler caught the error. Quickly, let's fix it:

[insert_marge_corrected]

This is a general pattern in __rdb__: when it sees a type, it doesn't forget about it. And it puts it to good use, as
we shall see in the next section.

[heading Retrieving data]
[#retrieve_data]

Let's retrieve a row now.

[select_print_all]

This code snippet prints:

[select_print_all_result]

What is happening here is this : `execute` senses that it is passed a query, so it returns `result_set` object.
The shift operator is overloaded and displays all the rows in the result set.

Usually we don't want to just print the data though. Let's see how we can read all the results in a vector. But a
vector of what ? Certainly not of "variants". Instead we use a __fusion__ vector wrapped in a __rdb__ class that
receives the data along with flags that indicates which columns contain `NULL`:

[select_into_vector]

The amount of data returned by a select query can be huge. The result set provides a `fetch` function that retrieves
the data row by row:

And the result is:

[select_fetch]

[heading Aliases]

Sometimes we need to refer to the same table several times, for example when using self-joins.
In __sql__ we use aliases for that. Here is how we make them with __rdb__:

[aliases]

[aliases_sql]

[heading Jumbo select]
[#jumbo_select]

The following query recaps all the constructs that are currently supported in a __select__ statement. It doesn't makemuch sense but at least it is type-correct ;-)

[jumbo_select]

[endsect]

